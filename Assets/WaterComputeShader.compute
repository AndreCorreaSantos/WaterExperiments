#pragma kernel CSMain

// Input/output buffer for vertex data
RWStructuredBuffer<float3> vertices;

// Time parameter for dynamic displacement
float _Time;

// Number of vertices (plane subdivisions)
int _VertexCount;


// float noise(x,z){

// }

[numthreads(1024, 1, 1)] // Define how many threads will run in parallel
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _VertexCount) return;

    // Get the vertex at this thread's index
    float3 v = vertices[id.x];

    // Perform displacement using a sine wave (you can replace this with any function)
    float pointValue = v.x + v.z; 
    v.y += sin(pointValue * 5.0 + _Time)*0.005 ;
    // vertex.z += cos(vertex.y * 5.0 + _Time) * 0.005;

    // Write the modified vertex back
    vertices[id.x] = v;
}
