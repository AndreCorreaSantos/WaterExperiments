#pragma kernel CSMain

// Input/output buffer for vertex data
RWStructuredBuffer<float3> vertices;

// Time parameter for dynamic displacement
float _Time;

float _TimeMultiplier;
float _HeightMultiplier;

// Number of vertices (plane subdivisions)
int _VertexCount;

float random (float2 st) {
    return frac(sin(dot(st.xy,
                         float2(12.9898,78.233)))*
        43758.5453123);
}

[numthreads(1024, 1, 1)] // Define how many threads will run in parallel
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _VertexCount) return;

    // Get the vertex at this thread's index
    float3 v = vertices[id.x];

    float2 i = floor(v.xz/10.0);
    float2 f = frac(v.xz);

    // Perform displacement using a sine wave (you can replace this with any function)
    // float2 st = i+_TimeMultiplier*_Time*0.001 ;
    float2 st = i;
    float noise = random(st); 
    v.y = noise*_HeightMultiplier;
    // vertex.z += cos(vertex.y * 5.0 + _Time) * 0.005;

    // Write the modified vertex back
    vertices[id.x] = v;
}
